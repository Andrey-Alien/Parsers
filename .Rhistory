sqrt(23)*(1180 - 1200)/35
qt(0.5/2)
qt(0.5/2,df=22)
qt(0.05/2,df=22)
qnorm(0.05)
qt(0.05,df=22)
(1180 - 1080)/(sqrt(42^2/15  + 35^2/23))
(1080 - 1180)/(sqrt(42^2/15  + 35^2/23))
23/180
(23/180 - 0.15)/sqrt(0.15*(1-0.15))*sqrt(180)
qnorm(0.01)
(38/350 - 0.15)/sqrt(0.15*(1-0.15))*sqrt(350)
(42/400 - 0.15)/sqrt(0.15*(1-0.15))*sqrt(400)
pnorm((1175-1200)/35*sqrt(23) + 1.64)
pnorm((1175-1200)/35*sqrt(23) + 1.64) + 0.5
pnorm((1175-1200)/35*sqrt(23) - 1.64) + 0.5
pt((1175-1200)/35*sqrt(23) + 1.64,df=22) + 0.5
genr_p_final <- function(N=300){
D <- c()
D[1] <- 1.3
mu <- 0.0373
rho <- 0.952
sigma2_D <- 0.1574
P <- c()
P[1] <- mu*rho/((1-rho)^2) + rho/(1-rho)*D[1]
epsdt <- rnorm(N,mean=0,sd=sqrt(sigma2_D))
ppi <- 0.85
ksi <- 0.5
tau <- 0.05
k <- 20
y <- rnorm(N,mean=0,sd=tau)
epsBt <- exp(y-tau^2/2)
thetta <- rbern(N, ppi)
b <- 1
B <- c()
B[1] <- 0.5
for(i in 2:N){
D[i] <- mu + D[i-1] + epsdt[i]
P[i] <- mu*rho/((1-rho)^2) + rho/(1-rho)*D[i]
if(B[i-1] < b){
B[i] <- 1/rho*B[i-1]*epsBt[i]
}else{
B[i] <- (ksi + 1/(ppi*rho)*thetta[i]*(B[i-1]-rho*ksi))*epsBt[i]
}
}
P_final <- P + B
# Построим красивую картиночку (доработать)
df <- data.frame(
x = 1:N,
P = P,
B = B,
P_final = P_final,
D = D
)
picture <- ggplot(df) +
geom_line(aes(x=x,y=P),color='blue') +
geom_line(aes(x=x,y=B),color='magenta') +
geom_line(aes(x=x,y=D),color='black') +
geom_line(aes(x=x,y=P_final),color='red') +
ggtitle('Графический график')+
xlab('Время') + ylab('Значение')
return(list(picture,P_final))
}
N = 300
itog <- genr_p_final(N=300)
library(bsts)
library(sophisthse)
install.packages(sophisthse)
install.packages("sophisthse")
library(sophisthse)
View(series_info)
df <- sophisthse('UNEMPL_Y')
df
str(df)
library(forecast)  # ETS (предшественник BS-TS)
model <- ets(df, model = "AAA")
View(series_info)
str(df)
library(forecast)  # ETS (предшественник BS-TS)
model <- ets(df, model = "AAA")
df <- sophisthse('UNEMPL_M')
model <- ets(df, model = "AAA")
model
model <- ets(df, model = "AAA",dampe = FALSE) # A - сама модель для ряда # A - тренд  # A - сезонность
model
forecast(model, h=4)
model$states
tsdispalay(model$states[, 3])
tsdispalay(model$states[,3])
tsdisplay(model$states[,3])
plot(model)
tsdisplay(model$states[,2])
plot(model)
library(bsts)      # bayesian structural TS
library(tidyverse) # data manipulation
library(tidyverse) # data manipulation
model_structure <- list( ) %>%
AddLocalLinearTrend(df) %>% AddSeasonal(df, nseasons = 12)
model <- bsts(state.specification = model_structure, niter = 1000)
model <- bsts(df, state.specification = model_structure, niter = 1000)
predict.bsts(model, h = 4)
forecast <- predict.bsts(model, h = 4)
forecast$mean
forecast$median
forecast$interval
qplot(x = forecast$distribution[,1])
qplot(x = forecast$distribution[,2])
plot(model,comp)
plot(model, type = "comp")
plot(model, "comp")
model_ets <- ets(df, model = "AAA",dampe = FALSE) # A - сама модель для ряда # A - тренд  # A - сезонность
model_auto_ets <- ets(df)
model_auto_ets
library(forecastHybrid)
install.packages("forecastHybrid")
forecast(model_hybrid, h = 4)
library(forecastHybrid)
model_hybrid <- hybridModel(df[, 1], model = "aef") # f - theta-метод
forecast(model_hybrid, h = 4)
0.4 - 0.3 == 0.3
0.4 - 0.1 == 0.2
0.4 - 0.1 == 0.3
0.4 - 0.1
14407 +  60814 + 197045
